// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	ChatMessage
	FriendGroupMessage
	GeneralMessage
	User
	RecvQueue
	UserInfor
	Thread
	MonitorServerStatus
	RequestInfo
	MonitorStatus
	ClientMonitorStatus
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ChatMessage struct {
	SId              uint64 `protobuf:"varint,1,opt,name=SId" json:"SId,omitempty"`
	SenderId         uint64 `protobuf:"varint,2,opt,name=SenderId" json:"SenderId,omitempty"`
	ReceiverId       uint64 `protobuf:"varint,3,opt,name=ReceiverId" json:"ReceiverId,omitempty"`
	MessageBody      string `protobuf:"bytes,4,opt,name=MessageBody" json:"MessageBody,omitempty"`
	RequesTtimeStamp uint64 `protobuf:"varint,5,opt,name=RequesTtimeStamp" json:"RequesTtimeStamp,omitempty"`
	SendId           uint64 `protobuf:"varint,6,opt,name=SendId" json:"SendId,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FriendGroupMessage struct {
	SId              uint64 `protobuf:"varint,1,opt,name=SId" json:"SId,omitempty"`
	RootId           uint64 `protobuf:"varint,2,opt,name=RootId" json:"RootId,omitempty"`
	Parent           uint64 `protobuf:"varint,3,opt,name=Parent" json:"Parent,omitempty"`
	SenderId         uint64 `protobuf:"varint,4,opt,name=SenderId" json:"SenderId,omitempty"`
	ReceiverId       uint64 `protobuf:"varint,5,opt,name=ReceiverId" json:"ReceiverId,omitempty"`
	MessageBody      string `protobuf:"bytes,6,opt,name=MessageBody" json:"MessageBody,omitempty"`
	RequestTimeStamp uint64 `protobuf:"varint,7,opt,name=RequestTimeStamp" json:"RequestTimeStamp,omitempty"`
}

func (m *FriendGroupMessage) Reset()                    { *m = FriendGroupMessage{} }
func (m *FriendGroupMessage) String() string            { return proto.CompactTextString(m) }
func (*FriendGroupMessage) ProtoMessage()               {}
func (*FriendGroupMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GeneralMessage struct {
	MessageType int32        `protobuf:"varint,1,opt,name=messageType" json:"messageType,omitempty"`
	SendId      uint64       `protobuf:"varint,2,opt,name=SendId" json:"SendId,omitempty"`
	SenderId    uint64       `protobuf:"varint,3,opt,name=SenderId" json:"SenderId,omitempty"`
	ReceiverId  uint64       `protobuf:"varint,4,opt,name=ReceiverId" json:"ReceiverId,omitempty"`
	SenderRG    uint32       `protobuf:"varint,5,opt,name=SenderRG" json:"SenderRG,omitempty"`
	RecviverRG  uint32       `protobuf:"varint,6,opt,name=RecviverRG" json:"RecviverRG,omitempty"`
	Chatmessage *ChatMessage `protobuf:"bytes,7,opt,name=Chatmessage" json:"Chatmessage,omitempty"`
	// FriendGroupMessage Friendgroupmessage = ;
	RequestTimeStamp uint64 `protobuf:"varint,8,opt,name=RequestTimeStamp" json:"RequestTimeStamp,omitempty"`
}

func (m *GeneralMessage) Reset()                    { *m = GeneralMessage{} }
func (m *GeneralMessage) String() string            { return proto.CompactTextString(m) }
func (*GeneralMessage) ProtoMessage()               {}
func (*GeneralMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GeneralMessage) GetChatmessage() *ChatMessage {
	if m != nil {
		return m.Chatmessage
	}
	return nil
}

type User struct {
	UserId    uint64 `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	RgId      uint32 `protobuf:"varint,2,opt,name=RgId" json:"RgId,omitempty"`
	SendId    uint64 `protobuf:"varint,3,opt,name=SendId" json:"SendId,omitempty"`
	ReceiveId uint64 `protobuf:"varint,4,opt,name=ReceiveId" json:"ReceiveId,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RecvQueue struct {
	MessageMap map[uint64]uint64 `protobuf:"bytes,1,rep,name=MessageMap" json:"MessageMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *RecvQueue) Reset()                    { *m = RecvQueue{} }
func (m *RecvQueue) String() string            { return proto.CompactTextString(m) }
func (*RecvQueue) ProtoMessage()               {}
func (*RecvQueue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RecvQueue) GetMessageMap() map[uint64]uint64 {
	if m != nil {
		return m.MessageMap
	}
	return nil
}

type UserInfor struct {
	UserId          uint32 `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	SendId          uint64 `protobuf:"varint,2,opt,name=SendId" json:"SendId,omitempty"`
	SendAckId       uint64 `protobuf:"varint,3,opt,name=SendAckId" json:"SendAckId,omitempty"`
	ReceiveId       uint64 `protobuf:"varint,4,opt,name=ReceiveId" json:"ReceiveId,omitempty"`
	ClientReceiveId uint64 `protobuf:"varint,5,opt,name=ClientReceiveId" json:"ClientReceiveId,omitempty"`
	// UserList userlist = 6;
	UserMap       map[uint64]*User      `protobuf:"bytes,7,rep,name=UserMap" json:"UserMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SendedMessage map[uint64]uint64     `protobuf:"bytes,8,rep,name=SendedMessage" json:"SendedMessage,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LocalMessage  map[uint64]*RecvQueue `protobuf:"bytes,9,rep,name=localMessage" json:"localMessage,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AckMessage    map[uint64]uint64     `protobuf:"bytes,10,rep,name=ackMessage" json:"ackMessage,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *UserInfor) Reset()                    { *m = UserInfor{} }
func (m *UserInfor) String() string            { return proto.CompactTextString(m) }
func (*UserInfor) ProtoMessage()               {}
func (*UserInfor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserInfor) GetUserMap() map[uint64]*User {
	if m != nil {
		return m.UserMap
	}
	return nil
}

func (m *UserInfor) GetSendedMessage() map[uint64]uint64 {
	if m != nil {
		return m.SendedMessage
	}
	return nil
}

func (m *UserInfor) GetLocalMessage() map[uint64]*RecvQueue {
	if m != nil {
		return m.LocalMessage
	}
	return nil
}

func (m *UserInfor) GetAckMessage() map[uint64]uint64 {
	if m != nil {
		return m.AckMessage
	}
	return nil
}

type Thread struct {
	SId         uint64            `protobuf:"varint,1,opt,name=SId" json:"SId,omitempty"`
	MessageList []*GeneralMessage `protobuf:"bytes,2,rep,name=MessageList" json:"MessageList,omitempty"`
}

func (m *Thread) Reset()                    { *m = Thread{} }
func (m *Thread) String() string            { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()               {}
func (*Thread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Thread) GetMessageList() []*GeneralMessage {
	if m != nil {
		return m.MessageList
	}
	return nil
}

// 一个服务器的状态消息，表明监控项目是什么, 什么服务器 时间 等等
type MonitorServerStatus struct {
	Name          string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timestamp     int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Servername    string  `protobuf:"bytes,3,opt,name=servername" json:"servername,omitempty"`
	Servertype    string  `protobuf:"bytes,4,opt,name=servertype" json:"servertype,omitempty"`
	Absolutevalue int64   `protobuf:"varint,5,opt,name=absolutevalue" json:"absolutevalue,omitempty"`
	Changesvalue  int64   `protobuf:"varint,6,opt,name=changesvalue" json:"changesvalue,omitempty"`
	Fvalue1       float32 `protobuf:"fixed32,7,opt,name=fvalue1" json:"fvalue1,omitempty"`
	Fvalue2       float32 `protobuf:"fixed32,8,opt,name=fvalue2" json:"fvalue2,omitempty"`
}

func (m *MonitorServerStatus) Reset()                    { *m = MonitorServerStatus{} }
func (m *MonitorServerStatus) String() string            { return proto.CompactTextString(m) }
func (*MonitorServerStatus) ProtoMessage()               {}
func (*MonitorServerStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// 请求消息
type RequestInfo struct {
	Snid         int64 `protobuf:"varint,1,opt,name=snid" json:"snid,omitempty"`
	Connectionid int64 `protobuf:"varint,2,opt,name=connectionid" json:"connectionid,omitempty"`
	Index        int64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Requestime   int64 `protobuf:"varint,4,opt,name=requestime" json:"requestime,omitempty"`
	Responsetime int64 `protobuf:"varint,5,opt,name=responsetime" json:"responsetime,omitempty"`
}

func (m *RequestInfo) Reset()                    { *m = RequestInfo{} }
func (m *RequestInfo) String() string            { return proto.CompactTextString(m) }
func (*RequestInfo) ProtoMessage()               {}
func (*RequestInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// client => Monitor server
// code 0x0101
// 作用: 客户端向monitoer server报告自身的信息
type MonitorStatus struct {
	Info   *RequestInfo           `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Status []*MonitorServerStatus `protobuf:"bytes,2,rep,name=Status" json:"Status,omitempty"`
}

func (m *MonitorStatus) Reset()                    { *m = MonitorStatus{} }
func (m *MonitorStatus) String() string            { return proto.CompactTextString(m) }
func (*MonitorStatus) ProtoMessage()               {}
func (*MonitorStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MonitorStatus) GetInfo() *RequestInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *MonitorStatus) GetStatus() []*MonitorServerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ClientMonitorStatus struct {
	Host     string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Finished int32  `protobuf:"varint,2,opt,name=finished" json:"finished,omitempty"`
	Sum      int32  `protobuf:"varint,3,opt,name=sum" json:"sum,omitempty"`
}

func (m *ClientMonitorStatus) Reset()                    { *m = ClientMonitorStatus{} }
func (m *ClientMonitorStatus) String() string            { return proto.CompactTextString(m) }
func (*ClientMonitorStatus) ProtoMessage()               {}
func (*ClientMonitorStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*ChatMessage)(nil), "message.ChatMessage")
	proto.RegisterType((*FriendGroupMessage)(nil), "message.FriendGroupMessage")
	proto.RegisterType((*GeneralMessage)(nil), "message.GeneralMessage")
	proto.RegisterType((*User)(nil), "message.User")
	proto.RegisterType((*RecvQueue)(nil), "message.recvQueue")
	proto.RegisterType((*UserInfor)(nil), "message.UserInfor")
	proto.RegisterType((*Thread)(nil), "message.Thread")
	proto.RegisterType((*MonitorServerStatus)(nil), "message.MonitorServerStatus")
	proto.RegisterType((*RequestInfo)(nil), "message.RequestInfo")
	proto.RegisterType((*MonitorStatus)(nil), "message.MonitorStatus")
	proto.RegisterType((*ClientMonitorStatus)(nil), "message.ClientMonitorStatus")
}

var fileDescriptor0 = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0x57, 0xe2, 0x3f, 0x69, 0x26, 0x35, 0x2d, 0x7b, 0x27, 0x88, 0xa2, 0x13, 0x9c, 0xcc, 0x21,
	0x55, 0x3c, 0x54, 0xa2, 0x20, 0xc4, 0x21, 0x21, 0x71, 0x77, 0x82, 0x52, 0x71, 0x95, 0x60, 0xd3,
	0x13, 0xcf, 0xbe, 0x64, 0xdb, 0x58, 0x4d, 0xec, 0xb0, 0x6b, 0x57, 0xf4, 0x03, 0xf0, 0xca, 0x57,
	0xe0, 0x8d, 0xef, 0xc1, 0xb7, 0xe0, 0x91, 0x8f, 0xc2, 0xce, 0xec, 0x7a, 0xbd, 0x4e, 0xd3, 0x9c,
	0xfa, 0x14, 0xcf, 0x6f, 0x67, 0x66, 0xe7, 0xf7, 0x9b, 0xf1, 0x38, 0x90, 0xac, 0x84, 0x52, 0xd9,
	0x95, 0x38, 0x5e, 0xcb, 0xb2, 0x2a, 0xd9, 0xc0, 0x9a, 0xe9, 0x3f, 0x3d, 0x18, 0xbd, 0x5a, 0x64,
	0xd5, 0xb9, 0xb1, 0xd9, 0x21, 0x04, 0xd3, 0xb3, 0xf9, 0xb8, 0xf7, 0xb4, 0x77, 0x14, 0xf2, 0x40,
	0x9d, 0xcd, 0xd9, 0x04, 0xf6, 0xa6, 0xa2, 0x98, 0x0b, 0xa9, 0xe1, 0x3e, 0xc1, 0x7b, 0xca, 0xda,
	0xec, 0x23, 0x00, 0x2e, 0x66, 0x22, 0xbf, 0xa1, 0xd3, 0x80, 0x4e, 0x41, 0x3a, 0x84, 0x3d, 0x85,
	0x91, 0x4d, 0xfc, 0xb2, 0x9c, 0xdf, 0x8e, 0x43, 0xed, 0x30, 0xe4, 0xa3, 0x55, 0x0b, 0xb1, 0xcf,
	0xe0, 0x90, 0x8b, 0xdf, 0x6a, 0xa1, 0x2e, 0xaa, 0x7c, 0x25, 0xa6, 0x55, 0xb6, 0x5a, 0x8f, 0x23,
	0xca, 0x73, 0x28, 0x37, 0x70, 0xf6, 0x01, 0xc4, 0x58, 0x89, 0xbe, 0x29, 0x26, 0x8f, 0x58, 0x91,
	0x95, 0xfe, 0xd7, 0x03, 0xf6, 0x83, 0xcc, 0xb5, 0x71, 0x2a, 0xcb, 0x7a, 0x7d, 0x3f, 0x15, 0x9d,
	0x80, 0x97, 0x65, 0xe5, 0x88, 0xc4, 0x92, 0x2c, 0xc4, 0x7f, 0xce, 0xa4, 0x28, 0x2a, 0x4b, 0x21,
	0x5e, 0x93, 0xd5, 0xa1, 0x1e, 0xee, 0xa4, 0x1e, 0xbd, 0x8b, 0x7a, 0xbc, 0x83, 0x7a, 0x75, 0xe1,
	0xa8, 0x0f, 0x7c, 0xea, 0x2d, 0x9e, 0xfe, 0xdd, 0x87, 0xf7, 0x4e, 0x45, 0x21, 0x64, 0xb6, 0x6c,
	0xe8, 0xe9, 0x0b, 0x6c, 0xb6, 0x8b, 0xdb, 0xb5, 0x20, 0x9a, 0x11, 0xf7, 0x21, 0x4f, 0xaf, 0xbe,
	0xaf, 0x57, 0x87, 0x56, 0xb0, 0x93, 0x56, 0x78, 0x87, 0x96, 0x8b, 0xe5, 0xa7, 0x44, 0x3a, 0x69,
	0x62, 0xf9, 0xa9, 0x8d, 0xbd, 0x41, 0x4f, 0x7d, 0x1a, 0xd3, 0x29, 0xc6, 0x5a, 0x84, 0x7d, 0x65,
	0x46, 0xcd, 0x96, 0x48, 0x5c, 0x47, 0x27, 0x8f, 0x8f, 0x9b, 0xc9, 0xf4, 0xc6, 0x90, 0x8f, 0x66,
	0xad, 0xe3, 0x56, 0xa1, 0xf6, 0xee, 0x11, 0x6a, 0x01, 0xe1, 0x1b, 0x25, 0x24, 0x72, 0xc7, 0x5f,
	0xd7, 0xff, 0xb8, 0x26, 0x8b, 0x31, 0x08, 0xf9, 0x95, 0x55, 0x24, 0xe1, 0xa1, 0xbc, 0x32, 0xed,
	0xb7, 0x3a, 0x05, 0x1d, 0x9d, 0x9e, 0xc0, 0xd0, 0x6a, 0xe1, 0xa4, 0x18, 0xca, 0x06, 0x48, 0xff,
	0xec, 0x01, 0x5a, 0x37, 0xbf, 0xd4, 0xa2, 0x16, 0xec, 0x25, 0x80, 0xad, 0xfd, 0x3c, 0x5b, 0xeb,
	0x3b, 0x03, 0x4d, 0x2d, 0x75, 0xd4, 0x9c, 0xdf, 0x71, 0xeb, 0xf4, 0x7d, 0x51, 0xc9, 0x5b, 0x0e,
	0x2b, 0x07, 0x4c, 0xbe, 0x85, 0x83, 0x8d, 0x63, 0x9c, 0xe1, 0x6b, 0x71, 0xdb, 0xcc, 0xb0, 0x7e,
	0x64, 0x8f, 0x21, 0xba, 0xc9, 0x96, 0xb5, 0xb0, 0x3d, 0x35, 0xc6, 0x37, 0xfd, 0xaf, 0x7b, 0xe9,
	0xbf, 0x11, 0x0c, 0x89, 0x73, 0x71, 0x59, 0x6e, 0x0a, 0x90, 0x38, 0x01, 0xee, 0x1b, 0x0a, 0x4d,
	0x16, 0xf1, 0x17, 0xb3, 0x6b, 0xa7, 0xc3, 0x50, 0x35, 0xc0, 0x6e, 0x29, 0xd8, 0x11, 0x1c, 0xbc,
	0x5a, 0xea, 0xf7, 0xaf, 0x6a, 0x7d, 0xcc, 0x0b, 0x71, 0x30, 0xeb, 0xc2, 0xec, 0x39, 0x0c, 0xb0,
	0x2a, 0xd4, 0x68, 0x40, 0x1a, 0x7d, 0xec, 0x34, 0x72, 0xa5, 0x1f, 0x5b, 0x0f, 0x23, 0xd0, 0xa0,
	0x36, 0x16, 0xfb, 0x09, 0x12, 0x9a, 0xbc, 0xb9, 0xd5, 0x48, 0x8f, 0x00, 0x26, 0xf8, 0x74, 0x4b,
	0x82, 0x8e, 0x9f, 0x49, 0x93, 0x28, 0x1f, 0x63, 0x3f, 0xc2, 0xfe, 0xb2, 0x9c, 0xb9, 0x97, 0x69,
	0x3c, 0xa4, 0x5c, 0xcf, 0xb6, 0xe4, 0x7a, 0xed, 0xb9, 0x99, 0x54, 0x9d, 0x48, 0x6c, 0x7c, 0x36,
	0xbb, 0x6e, 0xf2, 0xc0, 0x46, 0xe3, 0xdb, 0x3c, 0x2f, 0x9c, 0x93, 0x6d, 0x7c, 0x1b, 0x35, 0x39,
	0x83, 0x7d, 0x9f, 0xf3, 0x96, 0xae, 0x7f, 0xe2, 0x77, 0x7d, 0x74, 0x92, 0x74, 0x2e, 0xf0, 0x86,
	0x60, 0xf2, 0x1d, 0xb0, 0xbb, 0xec, 0x1f, 0x32, 0x46, 0x93, 0x29, 0xbc, 0x7f, 0x87, 0xf3, 0x96,
	0x04, 0x47, 0xdd, 0x8a, 0xd8, 0xdd, 0x59, 0xf7, 0x93, 0xea, 0xd1, 0xde, 0x10, 0xe0, 0x41, 0xa3,
	0xfd, 0x06, 0xe2, 0x8b, 0x85, 0x14, 0xd9, 0x7c, 0xcb, 0x52, 0x7f, 0xee, 0x16, 0xed, 0xeb, 0x5c,
	0x55, 0x3a, 0x16, 0x3b, 0xf0, 0xa1, 0x2b, 0xa7, 0xbb, 0x35, 0xdd, 0x82, 0x44, 0xdf, 0xf4, 0x8f,
	0x3e, 0x3c, 0x3a, 0x2f, 0x8b, 0xbc, 0x2a, 0xe5, 0x54, 0x48, 0xbd, 0xa4, 0xf4, 0x0e, 0xa9, 0x6a,
	0x85, 0x4b, 0xa2, 0xc8, 0x56, 0x66, 0xa7, 0x0e, 0x39, 0x3d, 0xe3, 0x1b, 0x80, 0x5f, 0x22, 0x45,
	0xdb, 0x07, 0x0b, 0x0c, 0x78, 0x0b, 0xe0, 0xea, 0x53, 0x94, 0x81, 0xe2, 0x02, 0x8a, 0xf3, 0x90,
	0xf6, 0xbc, 0xc2, 0x5d, 0x1d, 0xfa, 0xe7, 0x88, 0xb0, 0x67, 0x90, 0x64, 0x6f, 0x55, 0xb9, 0xac,
	0x2b, 0x61, 0x24, 0x88, 0xe8, 0x86, 0x2e, 0xc8, 0x52, 0xd8, 0xd7, 0x7b, 0xb1, 0xb8, 0x12, 0xca,
	0x38, 0xc5, 0xe4, 0xd4, 0xc1, 0xd8, 0x18, 0x06, 0x97, 0xf4, 0xf4, 0x39, 0x2d, 0xd8, 0x3e, 0x6f,
	0xcc, 0xf6, 0xe4, 0x84, 0xb6, 0xa7, 0x3b, 0x39, 0x49, 0xff, 0xd2, 0x7f, 0x02, 0xec, 0x86, 0xc5,
	0x61, 0x45, 0xfe, 0xaa, 0xc8, 0x8d, 0xca, 0x01, 0xa7, 0x67, 0xba, 0xbb, 0x2c, 0x0a, 0x31, 0xab,
	0xf2, 0x12, 0xcf, 0xfa, 0xf6, 0x6e, 0x0f, 0xc3, 0x06, 0xe6, 0x7a, 0xf6, 0x7e, 0x27, 0x01, 0x02,
	0x6e, 0x0c, 0xe4, 0x6e, 0xd7, 0xb4, 0x96, 0x8b, 0xb8, 0x07, 0xdc, 0x43, 0x30, 0xb3, 0x14, 0x6a,
	0x5d, 0x16, 0x4a, 0x90, 0x87, 0xa1, 0xde, 0xc1, 0xd2, 0x12, 0x92, 0xa6, 0x51, 0xa6, 0x45, 0x47,
	0x10, 0xe6, 0xba, 0x54, 0x2a, 0xd1, 0xff, 0x88, 0x78, 0x34, 0x38, 0x79, 0xb0, 0x2f, 0xf5, 0xc2,
	0xa3, 0x18, 0x3b, 0x1a, 0x4f, 0x9c, 0xef, 0x96, 0xd6, 0xeb, 0x75, 0x48, 0xbf, 0xe9, 0xaf, 0xf0,
	0xc8, 0xac, 0xb4, 0xee, 0xb5, 0x5a, 0x99, 0x45, 0xa9, 0xa7, 0xcc, 0x4e, 0x06, 0x3e, 0xe3, 0x27,
	0xf1, 0x32, 0x2f, 0x72, 0xb5, 0x10, 0x46, 0x95, 0x88, 0x3b, 0x1b, 0xc7, 0x55, 0xd5, 0x2b, 0xd2,
	0x23, 0xe2, 0xf8, 0xf8, 0x36, 0xa6, 0x3f, 0x60, 0x5f, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x0e,
	0x10, 0xed, 0x6e, 0x91, 0x09, 0x00, 0x00,
}
