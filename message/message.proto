syntax = "proto3";

package message;



message ChatMessage {

   uint64 SId = 1;     // machine sid
   uint64 SenderId = 2; // sender
   uint64 ReceiverId = 3; // chat message only
   
   string MessageBody   = 4;
   uint64 RequesTtimeStamp = 5;
   uint64 SendId = 6; // the send id of  two user

}

message FriendGroupMessage {

   uint64 SId = 1;     // machine sid
   uint64 RootId = 2;
   uint64 Parent = 3;
   uint64 SenderId = 4;   // sender
   uint64 ReceiverId = 5; // Receiver
   string MessageBody   = 6;
   uint64 RequestTimeStamp = 7;
}

message GeneralMessage {
   int32  messageType =1;
  // 1 - 3  for chat
  // 1 for chat message client to local server    senderid = senderid  recvid = recvid, localserver 发现sendid和自己应该一样 不一样，说明有问题
  // 2 for chat message local server to local server  // sendid = sendid  如果 recvid 和本rg一样， 应该扔回队列 不一样 就发到poster
  // 3 for chat message ack from local server to local server
  // 用户拿到消息2以后，应该产生一个新的消息,sendindex == 2 的id, recvid = 2 的sendid, sendid = 2 的recvid
  // 根据recvid, 如果recvid 的rg 和本rg 一样，那么就发到本地的队列
  // 不一样，就找一个poster 发过去

  // 从队列里拿到
  // 接受者应该是recvid, localserver 检查如果  和自己的rg 不一样，那就是bug. 如果一样，修改recvid 的ack id
  // 如果接受者的rg 和本机不一样 那么就是错误，需要丢弃

  //poster
  // 1  应该不会收到，收到说明bug
  // 2  根据recvid 算出rg ,找对应的poster 发送，如果recvid 和 本rg 一样，那么向本地localserver 发送
  // 3  根据recvid 算出rg ,找对应的poster 发送，如果recvid 和 本rg 一样，那么向本地localserver 发送


   uint64 SendId = 2; // the index of  client
   uint64 SenderId = 3;
   uint64 ReceiverId = 4;
   uint32 SenderRG = 5;
   uint32 RecviverRG = 6;
   ChatMessage  Chatmessage = 7;
   //FriendGroupMessage Friendgroupmessage = ;
   uint64  RequestTimeStamp = 8;  // the timestamp of enter A system, if a message liveing our system more than 50 second, it mean ,it is too old. we can drop it.

}

message User {
     uint64   UserId = 1;
     uint32   RgId = 2;
     uint64   SendId = 3;
     uint64   ReceiveId = 4;
}

// too heave
/*
message  SendQueue {
    // sendid => message
    map<uint64, GeneralMessage> MessageMap = 1;
}

message RecvQueue {
    // userid => sendQueue
    map<uint64, SendQueue> MessageMap = 1;
}

message AckQueue {
    // sendid => message
    map<uint64, GeneralMessage> MessageMap = 1;
}
*/

message recvQueue {
    map<uint64, uint64> MessageMap = 1;
}

message UserInfor {
     uint32 UserId    = 1; // 用户id

     uint64 SendId    = 2; // how many messgae has been send
     uint64 SendAckId = 3; // how many ack has received alreay,  
     
     uint64 ReceiveId = 4; // how many message received, 
     
     uint64 ClientReceiveId  = 5; // the count of message that was client (also is sender) got from server received queue
     
     
     //UserList userlist = 6;
     map<uint64, User> UserMap = 7;
     map<uint64, uint64>  SendedMessage = 8;                 // sendid => sendid   dump to redis map   
     map<uint64, recvQueue >  localMessage  = 9;             // userid => sendid   dump to redis map
     map<uint64, uint64 > ackMessage  = 10;                   // sendid => sendid
}



message Thread {
     uint64 SId = 1;
    repeated GeneralMessage MessageList = 2;
}

/*
message UserList {
    repeated User uidlist = 1;
}
*/

/*
message PostRequest {
     Postmessage message = 1;
     UserList    userlist = 2;
     uint64      posttime = 3;
     uint64      usersendid =4;
}
*/

// 一个服务器的状态消息，表明监控项目是什么, 什么服务器 时间 等等
message MonitorServerStatus {  // 基本消息类型

     string name = 1;         // 被监控的项目名称
     int64  timestamp = 2;    // 时间戳
     string servername = 3;   // 服务器名称
     string servertype = 4;   // 服务器类型
     int64 absolutevalue = 5; // 绝对值
     int64 changesvalue =6;   // 变化值
     float fvalue1 =7;
     float fvalue2 =8;

}

// client => server 全部都是偶数
// server => client 都是奇数

// 消息类型分为 4 个字节
// 高字节的 2 位 0x01  客户端和服务器之间的交互
//               0x02  服务器内部之间的交互
// 低字节的 2 位 奇数 代表请求
//               偶数代表 回应

// 基本类型消息

// 请求消息
message RequestInfo
{
    int64  snid         = 1; // 唯一的消息id号
    int64  connectionid = 2; // 唯一连接id
    int64  index        = 3; // 索引号
    int64  requestime   = 4;
    int64  responsetime = 5;
}

// Client => Server 之间的消息

// client => Monitor server
// code 0x0101
// 作用: 客户端向monitoer server报告自身的信息
message MonitorStatus
{
     RequestInfo info = 1;
    repeated MonitorServerStatus Status = 2;
}

message ClientMonitorStatus
{
    string host = 1;
    int32  finished = 2;
    int32  sum = 3;
}